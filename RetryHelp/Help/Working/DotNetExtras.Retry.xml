<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>DotNetExtras.Retry</name>
  </assembly>
  <members>
    <member name="T:DotNetExtras.Retry.Execute">
      <summary>
            Implements easy to use retry logic for arbitrary code blocks 
            allowing code to repeat a failed operation.
            </summary>
      <example>
        <para>
            EXAMPLE 1: Retry a failed operation a number of times.
            </para>
        <para>
            A typical use case would be retrying to calling external API with a history of 
            occasional failures that can be resolved by retrying the operation.
            </para>
        <code lang="csharp">
            // This object makes an external API call.
            Service service = new();
            
            // Gets the value from the called method.
            int result;
            
            try
            {
                // Trigger retry only if an external service exception is detected.
                // The catch block has custom logic determining if the condition is met
                // in case the called method does not throw the expected exception.
                result = Execute.WithRetry&lt;ExternalServiceException, int&gt;(() =&gt; 
                {
                    try
                    {
                        // Perform an operation that may throw an exception.
                        return service.DoSomething();
                    }
                    catch (Exception ex)
                    {
                        // Determine if a retry is appropriate and if so,
                        // throw the expected exception.
                        if (ex is TimeoutException || ex is SomeOtherExpectedException)
                        {
                            // Trigger the appropriate exception, 
                            // but do not discard the original exception. 
                            throw new ExternalServiceException("External exception detected.", ex);
                        }
                        
                        // Rethrow the original exception.
                        // If the original exception is not the expected one,
                        // a retry will not be attempted.
                        throw;
                    }
                    
                    // We will make 3 attempts with a half second delay between attempts.
                }, 3, TimeSpan.FromMilliseconds(500));
            
                // If we got so far, either the operation was successful or 
                // the reload and retry worked, so it is okay to use the result.
                Console.WriteLine($"Result: {result}");
            }
            catch
            {
                // If we got here, either the reload and retry did not help or 
                // the condition for the reload and retry was not met.
            }
            </code>
        <para>
            EXAMPLE 2: Retry a failed operation for a period of time.
            </para>
        <para>
            A typical use case here would be calling an external API 
            that may be waiting for a background process to complete.
            For example, when creating a new user in a directory (Azure, Active Directory),
            it may take a few seconds (or minutes) to synchronize the record across backend systems,
            so if a client creates a user and immediately follows up with an update,
            it may encounter the user not found exception. 
            In this case, attempting to repeat the update operation for a period of time may resolve the issue.
            </para>
        <code lang="csharp">
            // This object makes an external API call.
            Service service = new();
            
            // Gets the value from the called method.
            int result;
            
            try
            {
                // Trigger retry only if an external service exception is detected.
                // The catch block has custom logic determining if the condition is met
                // in case the called method does not throw the expected exception.
                result = Execute.WithRetry&lt;NotFoundException, int&gt;(() =&gt; 
                {
                    try
                    {
                        // Perform an operation that may throw an exception.
                        return service.DoSomething();
                    }
                    catch (Exception ex)
                    {
                        // Determine if a retry is appropriate and if so,
                        // throw the expected exception.
                        if (ex is InvalidInputException || ex is SomeOtherExpectedException)
                        {
                            // Trigger the appropriate exception, 
                            // but do not discard the original exception. 
                            throw new NotFoundException("Pending sync exception detected.", ex);
                        }
                        
                        // Rethrow the original exception.
                        // If the original exception is not the expected one,
                        // a retry will not be attempted.
                        throw;
                    }
                    
                    // We will keep trying for a couple of minutes
                    // with a ten second delay between attempts.
                }, 3, TimeSpan.FromMinutes(2), TimeSpan.FromSeconds(10));
            
                // If we got so far, either the operation was successful or 
                // the reload and retry worked, so it is okay to use the result.
                Console.WriteLine($"Result: {result}");
            }
            catch
            {
                // If we got here, either the reload and retry did not help or 
                // the condition for the reload and retry was not met.
            }
            </code>
        <para>
            EXAMPLE 3: Check if the operation failed because of a bad credential,
            reload the class with the updated credential, and retry the operation.
            </para>
        <para>
            A typical use case would be updating a client secret used to call an external API
            and letting the code refresh the settings with the updated credential before
            retrying the operation.
            </para>
        <code lang="csharp">
            // This object implements both the IReloadable.Reload() and the called methods 
            // (if needed, the two methods can be implemented by different classes).
            ReloadableService service = new();
            
            // Gets the value from the called method.
            int result;
            
            try
            {
                // If the code block throws an invalid credentials exception,
                // call the reload method and re-execute the code block.
                // The catch block has custom logic determining if the condition is met
                // in case the called method does not throw the expected exception.
                result = Execute.WithRetry&lt;InvalidCredentialsException, int&gt;(() =&gt; 
                {
                    try
                    {
                        // Perform an operation that may throw an exception.
                        return service.DoSomething();
                    }
                    catch (Exception ex)
                    {
                        // Determine if reload and retry is appropriate and 
                        // if so throw the expected exception.
                        if (ex is AccessDeniedException || ex is AuthenticationException)
                        {
                            // Trigger the appropriate exception, 
                            // but do not discard the original exception. 
                            throw new InvalidCredentialsException(
                                "Suspected expired client secret.", 
                                ex);
                        }
                        
                        // Rethrow the original exception.
                        // If the original exception is not the expected one,
                        // a retry will not be attempted.
                        throw;
                    }
                    
                    // In this example, we assume that the same object implements the
                    // called operation and the reload method, but it doe not have
                    // to be the case (the two methods can be implemented by two classes).
                }, service);
            
                // If we got so far, either the operation was successful or 
                // the reload and retry worked, so it is okay to use the result.
                Console.WriteLine($"Result: {result}");
            }
            catch
            {
                // If we got here, either the reload and retry did not help or 
                // the condition for the reload and retry was not met.
            }
            </code>
      </example>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.Prepare(System.Type,System.Nullable{System.TimeSpan},DotNetExtras.Retry.IReloadable,Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Implements common logic for the retry methods
            </summary>
      <param name="exceptionType">
            Type of exception triggering a retry.
            </param>
      <param name="sleep">
            Wait time before a retry.
            </param>
      <param name="caller">
            Service that mus be reloaded before a retry.
            </param>
      <param name="logger">
            Logs retry event information.
            </param>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry(System.Action,DotNetExtras.Retry.IReloadable,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that does not return a value and, 
            if the code throws any exception,
            calls the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method 
            and re-executes the same code again.
            </summary>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="caller">
            Object implementing the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method
            that will be called on a retry.
            </param>
      <param name="sleep">
            Defines sleep time before object reloading and retrying the code re-execution.
            </param>
      <param name="logger">
            Logs reload and retry event information.
            </param>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry``1(System.Action,DotNetExtras.Retry.IReloadable,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that does not return a value and, 
            if the code throws a specific exception,
            calls the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method 
            and re-executes the same code again.
            </summary>
      <typeparam name="E">
            Exception type that triggers a reload and code re-execution.
            </typeparam>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="caller">
            Object implementing the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method
            that will be called on a retry.
            </param>
      <param name="sleep">
            Defines sleep time before object reloading and retrying the code re-execution.
            </param>
      <param name="logger">
            Logs reload and retry event information.
            </param>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry``2(System.Func{``1},DotNetExtras.Retry.IReloadable,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that returns a value and, 
            if the code throws a specific exception,
            calls the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method 
            and re-executes the same code again.
            </summary>
      <typeparam name="E">
            Exception type that triggers a reload and code re-execution.
            </typeparam>
      <typeparam name="T">
            Data type of the value returned by the code block.
            </typeparam>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="caller">
            Object implementing the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method
            that will be called on a retry.
            </param>
      <param name="sleep">
            Defines sleep time before object reloading and retrying the code re-execution.
            </param>
      <param name="logger">
            Logs reload and retry event information.
            </param>
      <returns>
            Value returned by the code block.
            </returns>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry(System.Action,System.Int32,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that does not return a value and, 
            if the code throws any exception,
            re-executes it until it runs out of attempts.
            </summary>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="attempts">
            Maximum number of tries.
            </param>
      <param name="sleep">
            Sleep time between retries.
            </param>
      <param name="logger">
            Logs retry event information.
            </param>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry(System.Action,DotNetExtras.Retry.IReloadable,System.Int32,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that does not return a value and, 
            if the code throws any exception,
            calls the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method and
            re-executes it until it runs out of attempts.
            </summary>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="caller">
            Object implementing the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method
            that will be called on each retry.
            </param>
      <param name="attempts">
            Maximum number of tries.
            </param>
      <param name="sleep">
            Sleep time between retries.
            </param>
      <param name="logger">
            Logs retry event information.
            </param>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry``1(System.Action,System.Int32,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that does not return a value and, 
            if the code throws a specific exception,
            re-executes it until it runs out of attempts.
            </summary>
      <typeparam name="E">
            Exception type that triggers code re-execution.
            </typeparam>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="attempts">
            Maximum number of tries.
            </param>
      <param name="sleep">
            Sleep time between retries.
            </param>
      <param name="logger">
            Logs retry event information.
            </param>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry``1(System.Action,DotNetExtras.Retry.IReloadable,System.Int32,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that does not return a value and, 
            if the code throws a specific exception,
            calls the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method and
            re-executes it until it runs out of attempts.
            </summary>
      <typeparam name="E">
            Exception type that triggers code re-execution.
            </typeparam>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="caller">
            Object implementing the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method
            that will be called on each retry.
            </param>
      <param name="attempts">
            Maximum number of tries.
            </param>
      <param name="sleep">
            Sleep time between retries.
            </param>
      <param name="logger">
            Logs retry event information.
            </param>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry``1(System.Func{``0},System.Int32,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that returns a value and, 
            if the code throws any exception,
            re-executes it until it runs out of attempts.
            </summary>
      <typeparam name="T">
            Data type of the value returned by the code block.
            </typeparam>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="attempts">
            Maximum number of tries.
            </param>
      <param name="sleep">
            Sleep time between retries.
            </param>
      <param name="logger">
            Logs retry event information.
            </param>
      <returns>
            Value returned by the code block.
            </returns>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry``1(System.Func{``0},DotNetExtras.Retry.IReloadable,System.Int32,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that returns a value and, 
            if the code throws any exception,
            re-executes it until it runs out of attempts.
            </summary>
      <typeparam name="T">
            Data type of the value returned by the code block.
            </typeparam>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="caller">
            Object implementing the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method
            that will be called on each retry.
            </param>
      <param name="attempts">
            Maximum number of tries.
            </param>
      <param name="sleep">
            Sleep time between retries.
            </param>
      <param name="logger">
            Logs retry event information.
            </param>
      <returns>
            Value returned by the code block.
            </returns>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry``2(System.Func{``1},System.Int32,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that returns a value and, 
            if the code throws a specific exception,
            re-executes it until it runs out of attempts.
            </summary>
      <typeparam name="E">
            Exception type that triggers code re-execution.
            </typeparam>
      <typeparam name="T">
            Data type of the value returned by the code block.
            </typeparam>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="attempts">
            Maximum number of tries.
            </param>
      <param name="sleep">
            Sleep time between retries.
            </param>
      <returns>
            Value returned by the code block.
            </returns>
      <param name="logger">
            Logs retry event information.
            </param>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry``2(System.Func{``1},DotNetExtras.Retry.IReloadable,System.Int32,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that returns a value and, 
            if the code throws a specific exception,
            calls the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method and
            re-executes it until it runs out of attempts.
            </summary>
      <typeparam name="E">
            Exception type that triggers code re-execution.
            </typeparam>
      <typeparam name="T">
            Data type of the value returned by the code block.
            </typeparam>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="caller">
            Object implementing the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method
            that will be called on each retry.
            </param>
      <param name="attempts">
            Maximum number of tries.
            </param>
      <param name="sleep">
            Sleep time between retries.
            </param>
      <returns>
            Value returned by the code block.
            </returns>
      <param name="logger">
            Logs retry event information.
            </param>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry(System.Action,System.TimeSpan,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that does not return a value and, 
            if the code throws any exception,
            re-executes it until it runs out of time.
            </summary>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="timeout">
            Timeout for all attempts.
            </param>
      <param name="sleep">
            Sleep time between retries.
            </param>
      <param name="logger">
            Logs retry event information.
            </param>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry(System.Action,DotNetExtras.Retry.IReloadable,System.TimeSpan,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that does not return a value and, 
            if the code throws any exception,
            calls the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method and
            re-executes it until it runs out of time.
            </summary>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="caller">
            Object implementing the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method
            that will be called on each retry.
            </param>
      <param name="timeout">
            Timeout for all attempts.
            </param>
      <param name="sleep">
            Sleep time between retries.
            </param>
      <param name="logger">
            Logs retry event information.
            </param>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry``1(System.Action,System.TimeSpan,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that does not return a value and, 
            if the code throws a specific exception,
            re-executes it until it runs out of time.
            </summary>
      <typeparam name="E">
            Exception type that triggers code re-execution.
            </typeparam>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="timeout">
            Timeout for all attempts.
            </param>
      <param name="sleep">
            Sleep time between retries.
            </param>
      <param name="logger">
            Logs retry event information.
            </param>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry``1(System.Action,DotNetExtras.Retry.IReloadable,System.TimeSpan,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that does not return a value and, 
            if the code throws a specific exception,
            calls the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method and
            re-executes it until it runs out of time.
            </summary>
      <typeparam name="E">
            Exception type that triggers code re-execution.
            </typeparam>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="caller">
            Object implementing the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method
            that will be called on each retry.
            </param>
      <param name="timeout">
            Timeout for all attempts.
            </param>
      <param name="sleep">
            Sleep time between retries.
            </param>
      <param name="logger">
            Logs retry event information.
            </param>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry``1(System.Func{``0},System.TimeSpan,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that returns a value and, 
            if the code throws any exception,
            re-executes it until it runs out of time.
            </summary>
      <typeparam name="T">
            Data type of the value returned by the code block.
            </typeparam>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="timeout">
            Timeout for all attempts.
            </param>
      <param name="sleep">
            Sleep time between retries.
            </param>
      <param name="logger">
            Logs retry event information.
            </param>
      <returns>
            Value returned by the code block.
            </returns>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry``1(System.Func{``0},DotNetExtras.Retry.IReloadable,System.TimeSpan,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that returns a value and, 
            if the code throws any exception,
            re-executes it until it runs out of time.
            </summary>
      <typeparam name="T">
            Data type of the value returned by the code block.
            </typeparam>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="caller">
            Object implementing the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method
            that will be called on each retry.
            </param>
      <param name="timeout">
            Timeout for all attempts.
            </param>
      <param name="sleep">
            Sleep time between retries.
            </param>
      <param name="logger">
            Logs retry event information.
            </param>
      <returns>
            Value returned by the code block.
            </returns>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry``2(System.Func{``1},System.TimeSpan,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that returns a value and, 
            if the code throws a specific exception,
            re-executes it until it runs out of time.
            </summary>
      <typeparam name="E">
            Exception type that triggers code re-execution.
            </typeparam>
      <typeparam name="T">
            Data type of the value returned by the code block.
            </typeparam>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="timeout">
            Timeout for all attempts.
            </param>
      <param name="sleep">
            Sleep time between retries.
            </param>
      <param name="logger">
            Logs retry event information.
            </param>
      <returns>
            Value returned by the code block.
            </returns>
    </member>
    <member name="M:DotNetExtras.Retry.Execute.WithRetry``2(System.Func{``1},DotNetExtras.Retry.IReloadable,System.TimeSpan,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
      <summary>
            Executes code that returns a value and, 
            if the code throws a specific exception,
            calls the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method and
            re-executes it until it runs out of time.
            </summary>
      <typeparam name="E">
            Exception type that triggers code re-execution.
            </typeparam>
      <typeparam name="T">
            Data type of the value returned by the code block.
            </typeparam>
      <param name="code">
            Code block to be executed.
            </param>
      <param name="caller">
            Object implementing the <see cref="M:DotNetExtras.Retry.IReloadable.Reload" /> method
            that will be called on each retry.
            </param>
      <param name="timeout">
            Timeout for all attempts.
            </param>
      <param name="sleep">
            Sleep time between retries.
            </param>
      <param name="logger">
            Logs retry event information.
            </param>
      <returns>
            Value returned by the code block.
            </returns>
    </member>
    <member name="T:DotNetExtras.Retry.IReloadable">
      <summary>
            Defines the method allowing an object to re-initialize.
            </summary>
      <remarks>
            This interface is used by the relevant <see cref="O:DotNetExtras.Retry.Execute.WithRetry" /> methods
            when the retry condition is met and the object state or configuration must be refreshed
            before retrying a failed operation.
            </remarks>
    </member>
    <member name="M:DotNetExtras.Retry.IReloadable.Reload">
      <summary>
            Reinitializes the object (with potentially updated settings).
            </summary>
      <remarks>
            A typical use case for this method is reload configuration settings,
            that may have changed since the object was created or last used,
            such as client credentials, passwords, keys, and so on.
            </remarks>
    </member>
    <member name="N:DotNetExtras.Retry">
      <summary>Provides simple methods allowing applications to retry failed operations.</summary>
    </member>
  </members>
</doc>