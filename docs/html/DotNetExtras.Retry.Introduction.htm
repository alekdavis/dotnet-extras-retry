<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Introduction</title><meta name="Title" content="Introduction" /><meta name="Help.Id" content="DotNetExtras.Retry.Introduction" /><meta name="Help.ContentType" content="Concepts" /><meta name="guid" content="DotNetExtras.Retry.Introduction" /><meta name="Description" content="The DotNetExtras.Retry library provides simple methods for recovering from and retrying failed operations. For the detailed description of the library API, code samples, and usage scenarios, see the API documentation section." /><meta name="tocFile" content="../toc/Root.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">DotNetExtras.Retry Library Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><div id="HeaderPrelimContainer" class="level my-1 px-2"><div id="PreliminaryContainer" class="level-left"><div class="level-item"><span class="tag is-warning is-medium">This is preliminary documentation and is subject to change.</span></div></div></div><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Introduction</h1><div><p>
        The <em>DotNetExtras.Retry</em> library provides simple methods for recovering from and retrying failed operations. For the detailed description of the library API, code samples, and usage scenarios, see the <em>API documentation</em> section.
      </p></div><h2 id="Overview" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Overview</h2><div id="IDBABSection"><p>
          The <em>DotNetExtras.Retry</em> library handles three basic cases:
        </p><ol><li><p>A failed operation can recover after reloading configuration settings (or doing whatever preparation is required) and a single retry (the number of retry attempts can be adjusted, but generally, if one retry does not help here, there is little sense in retrying more).</p></li><li><p>A failed operation can recover after one or more retries until the retry timeout is reached.</p></li><li><p>A failed operation can recover after one or more retries until the maximum number of attempts is reached.</p></li></ol><h4 id="Scenarios" class="quickLinkHeader">Scenarios</h4><p>
                The most common real-life scenarios that can be addressed by the <em>DotNetExtras.Retry</em> library include:
              </p><ul><li><p>The code calls an external API with a client secret that expired and needs to be refreshed from the configuration source (secret vault, password safe, etc.).</p></li><li><p>The code calls an external API that fails because it waits for a background operation to complete, and the SLA for the background job is two minutes, so the code will keep retrying the operation for a couple of minutes.</p></li><li><p>The code calls an external API that fails occasionally for unclear reasons (could be a timeout or what not), but it normally succeeds on a repeated call.</p></li></ul><h4 id="Implementation" class="quickLinkHeader">Implementation</h4><p>
                The library implements retries as static <span class="code">Execute.WithRetry</span> methods that take a delegate (code block) as a parameter. The delegate is executed, and if it fails, the library will retry the failed code block until the operation succeeds or it reaches the stop condition. The stop condition can be based on the maximum number of attempts or a timeout. The caller may specify a delay between the retry attempts.
              </p><p>
                To detect a failure that requires a retry, the <span class="code">Execute.WithRetry</span> methods use the type of exception thrown by the delegate (code block).
              </p><p>
                In the scenarios where the operation can recover after reloading configuration settings, an  <span class="code">Execute.WithRetry</span> method needs an object that implements  the single <span class="code">Reload</span> method of the <span class="code">IReloadable</span> interface (this method reinitializes settings or does whatever else needs to be done to address the error).
              </p><h4 id="Example" class="quickLinkHeader">Example</h4><p>
               The following example illustrates how to detect a failure that may be caused by an old configuration setting, reload the settings, and retry the operation.
              </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Retry with reload</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using DotNetExtras.Retry;
...

// This class implements the Reload() method of the IReloadable interface,
// in which it reloads the configuration settings that could have changed.
ReloadableService service = new();

// If the operation throws a NotSupportedException,
// reload the service object and retry the operation one more time.
// The operation is expected to return an int value.
int result = Execute.WithRetry&lt;NotSupportedException, int&gt;(() =&gt; 
{
    // BEGINNING OF THE CODE BLOCK THAT WILL BE RETRIED.
    try
    {
        // Attempt to perform the operation.
        return service.DoSomething();
    }
    // This is not the expected exception for the retry,
    // but...
    catch (InvalidOperationException ex)
    {
        // ...we can simulate the expected exception for an appropriate condition.
        if (ex.Message.StartsWith("Unexpected"))
        {
            throw new NotSupportedException("Simulated exception triggering a reload.", ex);
        }

        // This will handle both the expected exception 
        // leading to a reload and retry (one retry attempt only),
        // as well as an unhandled exception that will 
        // result in error.
        throw;
    }
    // END OF THE CODE BLOCK THAT WILL BE RETRIED.

}, service);
// We are passing the same service object here because it is the one that 
// implements the reload method, but it can be a different object.
// We use the defaults for the delay (no delay) and the maximum attempts (2).</code></pre></div></div><p>             
                For the complete example and other samples covering additional scenarios, see the source code (and read the comments) of the 
                <a href="https://github.com/alekdavis/dotnet-extras-retry/tree/main/RetryDemo" target="_blank" rel="noopener noreferrer">demo project</a>.
              </p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Other Resources</h4><div><a href="https://www.nuget.org/packages/DotNetExtras.Retry" target="_blank" rel="noopener noreferrer">DotNetExtras.Retry NuGet package</a></div><div><a href="https://github.com/alekdavis/dotnet-extras-retry" target="_blank" rel="noopener noreferrer">DotNetExtras.Retry project repository</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Overview</a><ul class="menu"><li><a class="quickLink">Scenarios</a></li><li><a class="quickLink">Implementation</a></li><li><a class="quickLink">Example</a></li></ul></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p>Copyright © 2025 Alek Davis</p> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>