<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Execute Class</title><meta name="Title" content="Execute" /><meta name="Help.Id" content="T:DotNetExtras.Retry.Execute" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="DotNetExtras.Retry" /><meta name="guid" content="T_DotNetExtras_Retry_Execute" /><meta name="Description" content="Implements easy to use retry logic for arbitrary code blocks allowing code to repeat a failed operation." /><meta name="tocFile" content="../toc/IDAB.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">DotNetExtras.Retry Library Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><div id="HeaderPrelimContainer" class="level my-1 px-2"><div id="PreliminaryContainer" class="level-left"><div class="level-item"><span class="tag is-warning is-medium">This is preliminary documentation and is subject to change.</span></div></div></div><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Execute Class</h1><div class="summary">
            Implements easy to use retry logic for arbitrary code blocks 
            allowing code to repeat a failed operation.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="N_DotNetExtras_Retry.htm">DotNetExtras.Retry</a><br /><strong>Assembly:</strong> DotNetExtras.Retry (in DotNetExtras.Retry.dll) Version: 1.0.0<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="identifier">Execute</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">Execute</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDBCSection"><p>
            EXAMPLE 1: Retry a failed operation a number of times.
            </p><p>
            A typical use case would be retrying to calling external API with a history of 
            occasional failures that can be resolved by retrying the operation.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-csharp">// This object makes an external API call.
Service service = new();

// Gets the value from the called method.
int result;

try
{
    // Trigger retry only if an external service exception is detected.
    // The catch block has custom logic determining if the condition is met
    // in case the called method does not throw the expected exception.
    result = Execute.WithRetry&lt;ExternalServiceException, int&gt;(() =&gt; 
    {
        try
        {
            // Perform an operation that may throw an exception.
            return service.DoSomething();
        }
        catch (Exception ex)
        {
            // Determine if a retry is appropriate and if so,
            // throw the expected exception.
            if (ex is TimeoutException || ex is SomeOtherExpectedException)
            {
                // Trigger the appropriate exception, 
                // but do not discard the original exception. 
                throw new ExternalServiceException("External exception detected.", ex);
            }

            // Rethrow the original exception.
            // If the original exception is not the expected one,
            // a retry will not be attempted.
            throw;
        }

        // We will make 3 attempts with a half second delay between attempts.
    }, 3, TimeSpan.FromMilliseconds(500));

    // If we got so far, either the operation was successful or 
    // the reload and retry worked, so it is okay to use the result.
    Console.WriteLine($"Result: {result}");
}
catch
{
    // If we got here, either the reload and retry did not help or 
    // the condition for the reload and retry was not met.
}</code></pre></div></div><p>
            EXAMPLE 2: Retry a failed operation for a period of time.
            </p><p>
            A typical use case here would be calling an external API 
            that may be waiting for a background process to complete.
            For example, when creating a new user in a directory (Azure, Active Directory),
            it may take a few seconds (or minutes) to synchronize the record across backend systems,
            so if a client creates a user and immediately follows up with an update,
            it may encounter the user not found exception. 
            In this case, attempting to repeat the update operation for a period of time may resolve the issue.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-csharp">// This object makes an external API call.
Service service = new();

// Gets the value from the called method.
int result;

try
{
    // Trigger retry only if an external service exception is detected.
    // The catch block has custom logic determining if the condition is met
    // in case the called method does not throw the expected exception.
    result = Execute.WithRetry&lt;NotFoundException, int&gt;(() =&gt; 
    {
        try
        {
            // Perform an operation that may throw an exception.
            return service.DoSomething();
        }
        catch (Exception ex)
        {
            // Determine if a retry is appropriate and if so,
            // throw the expected exception.
            if (ex is InvalidInputException || ex is SomeOtherExpectedException)
            {
                // Trigger the appropriate exception, 
                // but do not discard the original exception. 
                throw new NotFoundException("Pending sync exception detected.", ex);
            }

            // Rethrow the original exception.
            // If the original exception is not the expected one,
            // a retry will not be attempted.
            throw;
        }

        // We will keep trying for a couple of minutes
        // with a ten second delay between attempts.
    }, 3, TimeSpan.FromMinutes(2), TimeSpan.FromSeconds(10));

    // If we got so far, either the operation was successful or 
    // the reload and retry worked, so it is okay to use the result.
    Console.WriteLine($"Result: {result}");
}
catch
{
    // If we got here, either the reload and retry did not help or 
    // the condition for the reload and retry was not met.
}</code></pre></div></div><p>
            EXAMPLE 3: Check if the operation failed because of a bad credential,
            reload the class with the updated credential, and retry the operation.
            </p><p>
            A typical use case would be updating a client secret used to call an external API
            and letting the code refresh the settings with the updated credential before
            retrying the operation.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-csharp">// This object implements both the IReloadable.Reload() and the called methods 
// (if needed, the two methods can be implemented by different classes).
ReloadableService service = new();

// Gets the value from the called method.
int result;

try
{
    // If the code block throws an invalid credentials exception,
    // call the reload method and re-execute the code block.
    // The catch block has custom logic determining if the condition is met
    // in case the called method does not throw the expected exception.
    result = Execute.WithRetry&lt;InvalidCredentialsException, int&gt;(() =&gt; 
    {
        try
        {
            // Perform an operation that may throw an exception.
            return service.DoSomething();
        }
        catch (Exception ex)
        {
            // Determine if reload and retry is appropriate and 
            // if so throw the expected exception.
            if (ex is AccessDeniedException || ex is AuthenticationException)
            {
                // Trigger the appropriate exception, 
                // but do not discard the original exception. 
                throw new InvalidCredentialsException(
                    "Suspected expired client secret.", 
                    ex);
            }

            // Rethrow the original exception.
            // If the original exception is not the expected one,
            // a retry will not be attempted.
            throw;
        }

        // In this example, we assume that the same object implements the
        // called operation and the reload method, but it doe not have
        // to be the case (the two methods can be implemented by two classes).
    }, service);

    // If we got so far, either the operation was successful or 
    // the reload and retry worked, so it is okay to use the result.
    Console.WriteLine($"Result: {result}");
}
catch
{
    // If we got here, either the reload and retry did not help or 
    // the condition for the reload and retry was not met.
}</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDAAEASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry_1.htm">WithRetry(Action, IReloadable, Nullable<span id="LSTD0CA4F89_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_1" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that does not return a value and, 
            if the code throws any exception,
            calls the <a href="M_DotNetExtras_Retry_IReloadable_Reload.htm">Reload<span id="LSTD0CA4F89_2" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> method 
            and re-executes the same code again.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry_3.htm">WithRetry(Action, Int32, Nullable<span id="LSTD0CA4F89_3" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_4" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that does not return a value and, 
            if the code throws any exception,
            re-executes it until it runs out of attempts.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry_4.htm">WithRetry(Action, TimeSpan, Nullable<span id="LSTD0CA4F89_5" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_6" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that does not return a value and, 
            if the code throws any exception,
            re-executes it until it runs out of time.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry.htm">WithRetry(Action, IReloadable, Int32, Nullable<span id="LSTD0CA4F89_7" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_8" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that does not return a value and, 
            if the code throws any exception,
            calls the <a href="M_DotNetExtras_Retry_IReloadable_Reload.htm">Reload<span id="LSTD0CA4F89_9" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> method and
            re-executes it until it runs out of attempts.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry_2.htm">WithRetry(Action, IReloadable, TimeSpan, Nullable<span id="LSTD0CA4F89_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_11" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that does not return a value and, 
            if the code throws any exception,
            calls the <a href="M_DotNetExtras_Retry_IReloadable_Reload.htm">Reload<span id="LSTD0CA4F89_12" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> method and
            re-executes it until it runs out of time.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry__1_1.htm">WithRetry<span id="LSTD0CA4F89_13" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>E<span id="LSTD0CA4F89_14" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Action, IReloadable, Nullable<span id="LSTD0CA4F89_15" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_16" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that does not return a value and, 
            if the code throws a specific exception,
            calls the <a href="M_DotNetExtras_Retry_IReloadable_Reload.htm">Reload<span id="LSTD0CA4F89_17" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> method 
            and re-executes the same code again.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry__1_3.htm">WithRetry<span id="LSTD0CA4F89_18" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>E<span id="LSTD0CA4F89_19" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Action, Int32, Nullable<span id="LSTD0CA4F89_20" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_21" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that does not return a value and, 
            if the code throws a specific exception,
            re-executes it until it runs out of attempts.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry__1_4.htm">WithRetry<span id="LSTD0CA4F89_22" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>E<span id="LSTD0CA4F89_23" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Action, TimeSpan, Nullable<span id="LSTD0CA4F89_24" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_25" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that does not return a value and, 
            if the code throws a specific exception,
            re-executes it until it runs out of time.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry__1_7.htm">WithRetry<span id="LSTD0CA4F89_26" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTD0CA4F89_27" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTD0CA4F89_28" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTD0CA4F89_29" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Nullable<span id="LSTD0CA4F89_30" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_31" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that returns a value and, 
            if the code throws any exception,
            re-executes it until it runs out of attempts.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry__1_8.htm">WithRetry<span id="LSTD0CA4F89_32" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTD0CA4F89_33" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTD0CA4F89_34" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTD0CA4F89_35" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, TimeSpan, Nullable<span id="LSTD0CA4F89_36" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_37" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that returns a value and, 
            if the code throws any exception,
            re-executes it until it runs out of time.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry__1.htm">WithRetry<span id="LSTD0CA4F89_38" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>E<span id="LSTD0CA4F89_39" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Action, IReloadable, Int32, Nullable<span id="LSTD0CA4F89_40" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_41" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that does not return a value and, 
            if the code throws a specific exception,
            calls the <a href="M_DotNetExtras_Retry_IReloadable_Reload.htm">Reload<span id="LSTD0CA4F89_42" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> method and
            re-executes it until it runs out of attempts.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry__1_2.htm">WithRetry<span id="LSTD0CA4F89_43" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>E<span id="LSTD0CA4F89_44" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Action, IReloadable, TimeSpan, Nullable<span id="LSTD0CA4F89_45" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_46" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that does not return a value and, 
            if the code throws a specific exception,
            calls the <a href="M_DotNetExtras_Retry_IReloadable_Reload.htm">Reload<span id="LSTD0CA4F89_47" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> method and
            re-executes it until it runs out of time.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry__1_5.htm">WithRetry<span id="LSTD0CA4F89_48" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTD0CA4F89_49" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTD0CA4F89_50" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTD0CA4F89_51" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReloadable, Int32, Nullable<span id="LSTD0CA4F89_52" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_53" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that returns a value and, 
            if the code throws any exception,
            re-executes it until it runs out of attempts.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry__1_6.htm">WithRetry<span id="LSTD0CA4F89_54" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTD0CA4F89_55" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTD0CA4F89_56" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTD0CA4F89_57" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReloadable, TimeSpan, Nullable<span id="LSTD0CA4F89_58" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_59" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that returns a value and, 
            if the code throws any exception,
            re-executes it until it runs out of time.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry__2_1.htm">WithRetry<span id="LSTD0CA4F89_60" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>E, T<span id="LSTD0CA4F89_61" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTD0CA4F89_62" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTD0CA4F89_63" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReloadable, Nullable<span id="LSTD0CA4F89_64" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_65" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that returns a value and, 
            if the code throws a specific exception,
            calls the <a href="M_DotNetExtras_Retry_IReloadable_Reload.htm">Reload<span id="LSTD0CA4F89_66" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> method 
            and re-executes the same code again.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry__2_3.htm">WithRetry<span id="LSTD0CA4F89_67" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>E, T<span id="LSTD0CA4F89_68" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTD0CA4F89_69" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTD0CA4F89_70" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Nullable<span id="LSTD0CA4F89_71" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_72" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that returns a value and, 
            if the code throws a specific exception,
            re-executes it until it runs out of attempts.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry__2_4.htm">WithRetry<span id="LSTD0CA4F89_73" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>E, T<span id="LSTD0CA4F89_74" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTD0CA4F89_75" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTD0CA4F89_76" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, TimeSpan, Nullable<span id="LSTD0CA4F89_77" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_78" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that returns a value and, 
            if the code throws a specific exception,
            re-executes it until it runs out of time.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry__2.htm">WithRetry<span id="LSTD0CA4F89_79" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>E, T<span id="LSTD0CA4F89_80" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTD0CA4F89_81" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTD0CA4F89_82" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReloadable, Int32, Nullable<span id="LSTD0CA4F89_83" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_84" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that returns a value and, 
            if the code throws a specific exception,
            calls the <a href="M_DotNetExtras_Retry_IReloadable_Reload.htm">Reload<span id="LSTD0CA4F89_85" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> method and
            re-executes it until it runs out of attempts.
            </td></tr><tr><td><a href="M_DotNetExtras_Retry_Execute_WithRetry__2_2.htm">WithRetry<span id="LSTD0CA4F89_86" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>E, T<span id="LSTD0CA4F89_87" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTD0CA4F89_88" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTD0CA4F89_89" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReloadable, TimeSpan, Nullable<span id="LSTD0CA4F89_90" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TimeSpan<span id="LSTD0CA4F89_91" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, ILogger)</a></td><td>
            Executes code that returns a value and, 
            if the code throws a specific exception,
            calls the <a href="M_DotNetExtras_Retry_IReloadable_Reload.htm">Reload<span id="LSTD0CA4F89_92" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> method and
            re-executes it until it runs out of time.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="N_DotNetExtras_Retry.htm">DotNetExtras.Retry Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p>Copyright © 2025 Alek Davis</p> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>